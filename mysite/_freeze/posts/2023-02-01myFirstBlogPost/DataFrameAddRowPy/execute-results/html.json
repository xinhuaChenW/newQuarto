{
  "hash": "7ed2882eadf26c241a25d405663a9720",
  "result": {
    "markdown": "---\ntitle: python DataFrame adding row\ndescription: A summary of methods of adding row to a python DataFrame\nauthor:\n  - name: Chen Xinhua\n    url: 'https://github.com/xinhuaChenW'\n    orcid: 0000-0002-4930-7375\n    affiliation: Ph.D. candidate of Forest Tree Genetics and Breeding @ Chinese Academy of Forestry\ndate: 2/01/2023\ncategories:\n  - python\n  - code\nformat:\n  html:\n    code-fold: false\n---\n\n![Picture from bing.gifposter.com](BlueBahamas_EN-US2634514272_1920x1080.jpg){width=800}\n\n\n\nDataFrame的学习笔记之添加行\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\ntechnologies = {\n    'Courses':[\"Spark\",\"Hadoop\",\"pandas\",\"Java\",\"Pyspark\"],\n    'Fee' :[20000,25000,30000,22000,26000],\n    'Duration':['30days','40days','35days','60days','50days'],\n    'Discount':[1000,2500,1500,1200,3000]\n               }\ndf = pd.DataFrame(technologies)\nnewRow = {'Courses':'Hyperion', 'Fee':24000, 'Duration':'55days', 'Discount':1800}\n```\n:::\n\n\n### 方法一\n\nappend()字典，字典键为列名，值为列的内容。增加的行成为DataFrame最后一行。\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf2 = df.append(newRow,ignore_index = True)\nprint(df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    Courses    Fee Duration  Discount\n0     Spark  20000   30days      1000\n1    Hadoop  25000   40days      2500\n2    pandas  30000   35days      1500\n3      Java  22000   60days      1200\n4   Pyspark  26000   50days      3000\n5  Hyperion  24000   55days      1800\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df2 = df.append(newRow,ignore_index = True)\n```\n:::\n:::\n\n\n### 方法二\nappend()列表到DataFrame指定行\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\naddList = [\"C++\", 28000, \"45days\", 4500]\ndf3 = df.append(pd.DataFrame([addList],index=['7'],columns= df.columns)) \nprint(df3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Courses    Fee Duration  Discount\n0    Spark  20000   30days      1000\n1   Hadoop  25000   40days      2500\n2   pandas  30000   35days      1500\n3     Java  22000   60days      1200\n4  Pyspark  26000   50days      3000\n7      C++  28000   45days      4500\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df3 = df.append(pd.DataFrame([addList],index=['7'],columns= df.columns))\n```\n:::\n:::\n\n\n注意，添加List到row时，list外边还要加一个中括号,其本质是先将list转为DataFrame,即先加上index和columns信息，变成一个一行的DataFrame，再append到原DataFrame中。\n\n### 方法三\nloc[]增加一个列表list到DataFrame\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nnewlst =  [\"Ruby\", 27000, \"60days\", 2000]\ndf.loc[len(df)] = newlst \nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Courses    Fee Duration  Discount\n0    Spark  20000   30days      1000\n1   Hadoop  25000   40days      2500\n2   pandas  30000   35days      1500\n3     Java  22000   60days      1200\n4  Pyspark  26000   50days      3000\n5     Ruby  27000   60days      2000\n```\n:::\n:::\n\n\n这种索引形式的添加，是直接在原df生效的，并不需要重新赋值给新变量，而且List就是横着直接成为DataFrame的一行\n\n### 方法四\nappend一个Seies到Row\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf4 = df.append(pd.Series(newlst,index = df.columns),ignore_index = True)\nprint(df4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Courses    Fee Duration  Discount\n0    Spark  20000   30days      1000\n1   Hadoop  25000   40days      2500\n2   pandas  30000   35days      1500\n3     Java  22000   60days      1200\n4  Pyspark  26000   50days      3000\n5     Ruby  27000   60days      2000\n6     Ruby  27000   60days      2000\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nFutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df4 = df.append(pd.Series(newlst,index = df.columns),ignore_index = True)\n```\n:::\n:::\n\n\n这里如果pd.Series()新建Series时，没有添加name参数，则此新建的Series没有name,或者说是name是None.\n而如果在新建Series时，添加name= 则此Series就有了名字。如下\nS1 = pd.Series(newlst,index = df.columns, name = \"KFC\")\n\n如果用append添加Series为行，那么index就成为列名，而Series的name就成为index.如果没有name,就必须加上ignore_index= True.\n\n### 方法五\nconcat\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nnew_row = pd.DataFrame({'Courses':'Huawei', 'Fee':24000, 'Duration':'55days', 'Discount':1800}, index=[0])\ndf5 = pd.concat([new_row,df.loc[:]]).reset_index(drop=True)\nprint(df5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Courses    Fee Duration  Discount\n0   Huawei  24000   55days      1800\n1    Spark  20000   30days      1000\n2   Hadoop  25000   40days      2500\n3   pandas  30000   35days      1500\n4     Java  22000   60days      1200\n5  Pyspark  26000   50days      3000\n6     Ruby  27000   60days      2000\n```\n:::\n:::\n\n\n增加的new_row排在前，则new_row就在新的DataFrame最前，如果new_row排在后[df.loc[:],new_row],\n则new_row在新DataFrame最后\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf6 = pd.concat([df.loc[:],new_row]).reset_index(drop=True)\nprint(df6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Courses    Fee Duration  Discount\n0    Spark  20000   30days      1000\n1   Hadoop  25000   40days      2500\n2   pandas  30000   35days      1500\n3     Java  22000   60days      1200\n4  Pyspark  26000   50days      3000\n5     Ruby  27000   60days      2000\n6   Huawei  24000   55days      1800\n```\n:::\n:::\n\n\n注意concat与append的语法区别，concat只能写成concat后面接括号的形式，而不能写成df.concat的形式，\n不同的函数调用方式不一样，要区分。\n\n### 方法六\nloc添加\n思路也简单，df.loc['7'] 或df.loc['7',:]索引到这一行，然后把一个list赋值就行。\n注意，这种方法也是默认inplace生效的。\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf.loc['8'] = [\"Beehive\",28000,\"80days\",6000]\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Courses    Fee Duration  Discount\n0    Spark  20000   30days      1000\n1   Hadoop  25000   40days      2500\n2   pandas  30000   35days      1500\n3     Java  22000   60days      1200\n4  Pyspark  26000   50days      3000\n5     Ruby  27000   60days      2000\n8  Beehive  28000   80days      6000\n```\n:::\n:::\n\n\nOK,DataFrame添加行的方法全部总结完成。\n\n参考： <https://sparkbyexamples.com/pandas/how-to-append-row-to-pandas-dataframe/#:~:text=You%20can%20create%20a%20DataFrame,will%20get%20you%20an%20error>\n\n",
    "supporting": [
      "DataFrameAddRowPy_files"
    ],
    "filters": [],
    "includes": {}
  }
}